name: "Triage: Apply Labels"
on:
  pull_request:
    types: [reopened, synchronize, opened]
#   issues:
#     types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to triage'
        required: true
        type: number

permissions:
  contents: read
  issues: read
  models: read

jobs:
  triage-issue:
    name: Apply Labels
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Issue Data
        id: issue-data
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = '29634';
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            const data = {
              title: issue.data.title,
              body: issue.data.body,
              number: issue.data.number
            };
            const fs = require('fs');
            fs.writeFileSync('issue-data.json', JSON.stringify(data, null, 2));
            return data;

    #   - name: Get Issue Data  
    #     id: issue-data
    #     if: github.event_name == 'workflow_dispatch'
    #     uses: actions/github-script@v7
    #     with:
    #       script: |
    #         const issue_number = context.payload.inputs.issue_number;
    #         const issue = await github.rest.issues.get({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           issue_number: issue_number
    #         });
    #         return {
    #           title: issue.data.title,
    #           body: issue.data.body,
    #           number: issue.data.number
    #         };
    #       result-encoding: string

      - name: Extract Issue Data
        id: issue-data-extract
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "issues") {
            $json = "${{ github.event.issue }}"
          } else {
            Get-Content -Raw "issue-data.json"
            $json = Get-Content -Raw "issue-data.json"
          }
          $issue = $json | ConvertFrom-Json
          "number=$($issue.number)" >> $env:GITHUB_OUTPUT
          "title=$($issue.title | ConvertTo-Json | ConvertTo-Json)" >> $env:GITHUB_OUTPUT
          "body=$($issue.body | ConvertTo-Json | ConvertTo-Json)" >> $env:GITHUB_OUTPUT

      - name: Create Prompt
        id: create-prompt
        shell: pwsh
        run: |
          $number = ${{ steps.issue-data-extract.outputs.number }}
          $title = "${{ steps.issue-data-extract.outputs.title }}"
          $body = "${{ steps.issue-data-extract.outputs.body }}"
          Set-Content -Path "prompt.md" -Value 
          @"
          A new issue has arrived, please triage and apply the appropriate labels.
          The issue is as follows:

          The issue number is:
          #$number

          The title is:
          $title

          The body is:
          $body
          "@
          cat prompt.md

      - name: Load System Prompt
        id: load-system-prompt
        shell: pwsh
        run: |
          $md = Get-Content -Raw ".github/prompts/apply-label.prompt.md"
          "prompt=$($md | ConvertTo-Json)" >> $env:GITHUB_OUTPUT

      - name: Run AI Inference
        id: inference
        uses: actions/ai-inference@main
        with:
          prompt-file: './prompt.md'
          model: gpt-4o
          max-tokens: 1000
          system-prompt: ${{ steps.load-system-prompt.outputs.prompt }}

      - name: Log AI Analysis
        run: |
          echo "::group::AI Analysis for Issue #${{ steps.issue-data-extract.outputs.number }}"
          echo "${{ steps.inference.outputs.response }}"
          echo "::endgroup::"

          # Save full response to file for potential debugging
          echo "${{ steps.inference.outputs.response }}" > ai-analysis-issue-${{ steps.issue-data-extract.outputs.number }}.txt
